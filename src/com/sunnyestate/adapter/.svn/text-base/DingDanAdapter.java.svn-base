package com.sunnyestate.adapter;

import java.util.ArrayList;
import java.util.List;

import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Typeface;
import android.text.Html;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;

import com.sunnyestate.AgainBuyActivity;
import com.sunnyestate.OrderDetailActivity;
import com.sunnyestate.R;
import com.sunnyestate.SelectPayActivity;
import com.sunnyestate.data.OrderData;
import com.sunnyestate.data.OrderItem;
import com.sunnyestate.enums.RetError;
import com.sunnyestate.task.AbstractTaskPostCallBack;
import com.sunnyestate.task.ConfirmDialog;
import com.sunnyestate.task.DelOrderTask;
import com.sunnyestate.utils.DialogUtil;
import com.sunnyestate.utils.ToastUtil;
import com.sunnyestate.utils.Utils;

import fynn.app.PromptDialog;

public class DingDanAdapter extends BaseAdapter {
	private Context mContext;
	private List<OrderData> lists = new ArrayList<OrderData>();

	public DingDanAdapter(Context mContext, List<OrderData> lists) {
		this.mContext = mContext;
		this.lists = lists;
	}

	@Override
	public int getCount() {
		return lists.size();
	}

	@Override
	public Object getItem(int arg0) {
		return null;
	}

	@Override
	public long getItemId(int arg0) {
		return 0;
	}

	@Override
	public View getView(final int position, View convertView, ViewGroup arg2) {
		ViewHolder holder;
		if (convertView == null) {
			convertView = LayoutInflater.from(mContext).inflate(
					R.layout.dingdan_item, null);
			holder = new ViewHolder();
			holder.btn_again_buy = (Button) convertView
					.findViewById(R.id.img_again_buy);
			holder.btn_go_pay = (Button) convertView
					.findViewById(R.id.img_go_pay);
			holder.btn_wuliu = (Button) convertView
					.findViewById(R.id.img_wuliu);
			holder.img_del = (ImageView) convertView.findViewById(R.id.img_del);
			holder.txt_dingdan_number = (TextView) convertView
					.findViewById(R.id.txt_dingdan_number);
			holder.txt_fukuan = (TextView) convertView
					.findViewById(R.id.txt_fukuan);
			holder.txt_status = (TextView) convertView
					.findViewById(R.id.txt_tishi);
			holder.line = (View) convertView.findViewById(R.id.line);
			holder.mListView = (ListView) convertView
					.findViewById(R.id.listView);
			convertView.setTag(holder);
		} else {
			holder = (ViewHolder) convertView.getTag();
		}
		if (position == 0) {
			holder.line.setVisibility(View.GONE);
		} else {
			holder.line.setVisibility(View.VISIBLE);
		}
		OrderData order = lists.get(position);
		holder.txt_status.setTypeface(Typeface.defaultFromStyle(Typeface.BOLD));
		holder.txt_status.getPaint().setFakeBoldText(true);
		if (order.getOrder_status() == 1) {
			holder.txt_status.setText("等待付款");
			holder.btn_go_pay.setVisibility(View.VISIBLE);
			holder.btn_again_buy.setVisibility(View.GONE);
			holder.btn_wuliu.setVisibility(View.GONE);
		} else if (order.getOrder_status() == 4) {
			holder.txt_status.setText("完成");
			holder.btn_go_pay.setVisibility(View.GONE);
			holder.btn_again_buy.setVisibility(View.VISIBLE);
			holder.btn_wuliu.setVisibility(View.VISIBLE);
		} else if (order.getOrder_status() == 2) {
			holder.txt_status.setText("已支付");
			holder.btn_go_pay.setVisibility(View.GONE);
			holder.btn_again_buy.setVisibility(View.GONE);
			holder.btn_wuliu.setVisibility(View.VISIBLE);
		} else if (order.getOrder_status() == 3) {
			holder.txt_status.setText("已发货");
			holder.btn_go_pay.setVisibility(View.GONE);
			holder.btn_again_buy.setVisibility(View.GONE);
			holder.btn_wuliu.setVisibility(View.VISIBLE);
		}
		holder.txt_fukuan.setText(Html.fromHtml("实付款:<font color=#ff4900>￥"
				+ order.getPayprice() + "0</font> "));
		holder.txt_dingdan_number.setText("订单号:" + order.getOrdercode());
		holder.mListView.setAdapter(new DingDanItemAdapter(mContext, order
				.getItemList()));
		holder.img_del.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				del(position);
			}
		});
		holder.btn_go_pay.setOnClickListener(new OnClick(position));
		holder.btn_again_buy.setOnClickListener(new OnClick(position));
		holder.btn_wuliu.setOnClickListener(new OnClick(position));
		holder.mListView.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
					long arg3) {
				mContext.startActivity(new Intent(mContext,
						OrderDetailActivity.class).putExtra("orderdata",
						lists.get(position)));
				Utils.leftOutRightIn(mContext);
			}
		});
		return convertView;
	}

	class ViewHolder {
		TextView txt_status;
		TextView txt_dingdan_number;
		ImageView img_del;
		ListView mListView;
		TextView txt_fukuan;
		Button btn_go_pay;
		Button btn_wuliu;
		Button btn_again_buy;
		View line;
	}

	class OnClick implements OnClickListener {
		private int position;

		public OnClick(int position) {
			this.position = position;
		}

		@Override
		public void onClick(View v) {
			switch (v.getId()) {
			case R.id.img_go_pay:
				intentPay(position);
				break;
			case R.id.img_again_buy:
				mContext.startActivity(new Intent(mContext,
						AgainBuyActivity.class).putExtra("orderdata",
						lists.get(position)));
				Utils.leftOutRightIn(mContext);
				break;
			case R.id.img_wuliu:
				wuliu(position);
			default:
				break;
			}
		}

	}

	private void intentPay(int position) {
		String pay_body = "";
		String pay_subject = "";
		for (OrderItem item : lists.get(position).getItemList()) {
			pay_body += item.getTitleval() + ",";
		}
		if (lists.get(position).getItemList().size() > 0) {
			pay_subject = lists.get(position).getItemList().get(0)
					.getTitleval()
					+ "(共" + lists.get(position).getItemList().size() + "件)";
			;
		}
		mContext.startActivity(new Intent(mContext, SelectPayActivity.class)
				.putExtra("pay_price", lists.get(position).getPayprice())
				.putExtra("pay_code", lists.get(position).getPaycode())
				.putExtra("pay_subject", pay_subject)
				.putExtra("pay_body", pay_body));
		Utils.leftOutRightIn(mContext);
	}

	private void del(final int position) {
		PromptDialog.Builder dialog = DialogUtil.confirmDialog(mContext,
				"确定要删除该订单吗?", "确定", "取消", new ConfirmDialog() {

					@Override
					public void onOKClick() {
						delOrder(position);
					}

					@Override
					public void onCancleClick() {

					}
				});
		dialog.show();
	}

	private void wuliu(final int position) {
		if (lists.get(position).getOrder_status() == 2) {
			ToastUtil.showToast("暂时没有物流信息");
			return;
		}
		PromptDialog.Builder dialog = DialogUtil.confirmDialog(mContext,
				"物流信息", lists.get(position).getShipcode(), "确定", "",
				new ConfirmDialog() {

					@Override
					public void onOKClick() {
					}

					@Override
					public void onCancleClick() {

					}
				});
		dialog.show();
	}

	private void delOrder(final int position) {
		final Dialog dialog = DialogUtil.createLoadingDialog(mContext, "删除中");
		dialog.show();
		DelOrderTask task = new DelOrderTask();
		task.setmCallBack(new AbstractTaskPostCallBack<RetError>() {
			@Override
			public void taskFinish(RetError result) {
				if (dialog != null) {
					dialog.dismiss();
				}
				if (result != RetError.NONE) {
					return;
				}
				ToastUtil.showToast("订单已删除");
				lists.remove(position);
				notifyDataSetChanged();
			}
		});
		task.executeParallel(lists.get(position));

	}
}
