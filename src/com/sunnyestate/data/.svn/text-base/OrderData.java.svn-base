package com.sunnyestate.data;

import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.sunnyestate.enums.RetError;
import com.sunnyestate.utils.Base64;
import com.sunnyestate.utils.HttpUrlHelper;
import com.sunnyestate.utils.SharedUtils;

public class OrderData extends BaseData implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private static final String DEL_ORDER_API = "orderUpdate";
	private static final String SUBMIT_ORDER_API = "orderSubmit";

	private Adress adress;
	private int id;
	private int order_status;// 订单状态（1创建 2支付 3发货 4完成 0订单取消 -1订单取消）
	private float orderprice;// 订单总价
	private float payprice;// 订单实际支付价格
	private int isship;// 是否发货
	private String paycode;// 支付流水
	private String addtime = "";// 订单创建时间
	private String paytime = "";// 支付时间
	private String shiptime = "";// 发货时间
	private String shipcode;// 发货信息
	private String ordercode = "";// 订单流水号
	private int uid;// 用户id
	private int ttype;// 发票类型
	private int teader;// 发票抬头
	private List<OrderItem> itemList = new ArrayList<OrderItem>();

	public Adress getAdress() {
		return adress;
	}

	public void setAdress(Adress adress) {
		this.adress = adress;
	}

	public float getPayprice() {
		return payprice;
	}

	public void setPayprice(float payprice) {
		this.payprice = payprice;
	}

	public String getShipcode() {
		return shipcode;
	}

	public void setShipcode(String shipcode) {
		this.shipcode = shipcode;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public int getOrder_status() {
		return order_status;
	}

	public void setOrder_status(int order_status) {
		this.order_status = order_status;
	}

	public float getOrderprice() {
		return orderprice;
	}

	public void setOrderprice(float orderprice) {
		this.orderprice = orderprice;
	}

	public int getIsship() {
		return isship;
	}

	public void setIsship(int isship) {
		this.isship = isship;
	}

	public String getPaycode() {
		return paycode;
	}

	public void setPaycode(String paycode) {
		this.paycode = paycode;
	}

	public String getAddtime() {
		return addtime;
	}

	public void setAddtime(String addtime) {
		this.addtime = addtime;
	}

	public String getPaytime() {
		return paytime;
	}

	public void setPaytime(String paytime) {
		this.paytime = paytime;
	}

	public String getShiptime() {
		return shiptime;
	}

	public void setShiptime(String shiptime) {
		this.shiptime = shiptime;
	}

	public String getOrdercode() {
		return ordercode;
	}

	public void setOrdercode(String ordercode) {
		this.ordercode = ordercode;
	}

	public int getUid() {
		return uid;
	}

	public void setUid(int uid) {
		this.uid = uid;
	}

	public int getTtype() {
		return ttype;
	}

	public void setTtype(int ttype) {
		this.ttype = ttype;
	}

	public int getTeader() {
		return teader;
	}

	public void setTeader(int teader) {
		this.teader = teader;
	}

	public List<OrderItem> getItemList() {
		return itemList;
	}

	public void setItemList(List<OrderItem> itemList) {
		this.itemList = itemList;
	}

	public RetError delOrder() {
		RetError ret = RetError.NONE;

		String result = HttpUrlHelper.getUrlData(DEL_ORDER_API + "/orderid/"
				+ id + "/status/-1" + "/username/" + SharedUtils.getUserName()
				+ "/password/" + SharedUtils.getPasswordKey());
		if (result == null) {
			return RetError.INVALID;
		}
		int res_code = -1;
		Object[] resultArr = getRootElement(result);
		res_code = (Integer) resultArr[0];
		String message = (String) resultArr[2];
		if (res_code != 0) {
			ret = RetError.INVALID;
			ret.setMessage(message);
			return ret;
		}
		return ret;
	}

	/**
	 * 将数组转换为JSON格式的数据。
	 * 
	 * @param stoneList
	 *            数据源
	 * @return JSON格式的数据
	 */
	public JSONObject changeArrayDateToJson(List<ShoppingCar> lists) {
		try {
			JSONArray array = new JSONArray();
			JSONObject object = new JSONObject();
			int length = lists.size();
			for (int i = 0; i < length; i++) {
				ShoppingCar car = lists.get(i);
				JSONObject stoneObject = new JSONObject();
				stoneObject.put("id", car.getShopping_id());
				stoneObject.put("num", car.getCount());
				array.put(stoneObject);
			}
			object.put("carts", array);
			object.put("address", id);
			object.put("t_type", 0);
			object.put("t_header", 0);
			return object;
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return null;
	}

	public RetError sumitOrder(List<ShoppingCar> lists) {
		RetError ret = RetError.NONE;

		JSONObject object = changeArrayDateToJson(lists);
		String result;
		try {
			result = HttpUrlHelper.getUrlData(SUBMIT_ORDER_API
					+ "/ljs/"
					+ URLEncoder.encode(Base64.toBase64(object.toString()),
							"utf-8") + "/username/" + SharedUtils.getUserName()
					+ "/password/" + SharedUtils.getPasswordKey());
			int res_code = -1;
			Object[] resultArr = getRootElement(result);
			res_code = (Integer) resultArr[0];
			String message = (String) resultArr[2];
			if (res_code != 0) {
				ret = RetError.INVALID;
				ret.setMessage(message);
				return ret;
			}
			ret.setMessage(message);
			return ret;
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		return RetError.INVALID;
	}
}
